 // Note: this file is generated by GenerateSettingsTypes.cs - DO NOT MODIFY
using Centazio.Core.Misc;

namespace Centazio.Core.Settings;

public record AzSettings {
  public required string ListFunctionAppsCmd { get; init; }
  public required string ListFunctionsCmd { get; init; }
  public required string DeleteFunctionAppCmd { get; init; }
  public required string StartFunctionAppCmd { get; init; }
  public required string StopFunctionAppCmd { get; init; }

  public Dto ToDto() => new() {
    ListFunctionAppsCmd = ListFunctionAppsCmd,
    ListFunctionsCmd = ListFunctionsCmd,
    DeleteFunctionAppCmd = DeleteFunctionAppCmd,
    StartFunctionAppCmd = StartFunctionAppCmd,
    StopFunctionAppCmd = StopFunctionAppCmd,
  };

  public record Dto : IDto<AzSettings> {
    public string? ListFunctionAppsCmd { get; init; }
    public string? ListFunctionsCmd { get; init; }
    public string? DeleteFunctionAppCmd { get; init; }
    public string? StartFunctionAppCmd { get; init; }
    public string? StopFunctionAppCmd { get; init; }

    public AzSettings ToBase() => new() {
      ListFunctionAppsCmd = String.IsNullOrWhiteSpace(ListFunctionAppsCmd) ? throw new ArgumentNullException(nameof(ListFunctionAppsCmd)) : ListFunctionAppsCmd.Trim(),
      ListFunctionsCmd = String.IsNullOrWhiteSpace(ListFunctionsCmd) ? throw new ArgumentNullException(nameof(ListFunctionsCmd)) : ListFunctionsCmd.Trim(),
      DeleteFunctionAppCmd = String.IsNullOrWhiteSpace(DeleteFunctionAppCmd) ? throw new ArgumentNullException(nameof(DeleteFunctionAppCmd)) : DeleteFunctionAppCmd.Trim(),
      StartFunctionAppCmd = String.IsNullOrWhiteSpace(StartFunctionAppCmd) ? throw new ArgumentNullException(nameof(StartFunctionAppCmd)) : StartFunctionAppCmd.Trim(),
      StopFunctionAppCmd = String.IsNullOrWhiteSpace(StopFunctionAppCmd) ? throw new ArgumentNullException(nameof(StopFunctionAppCmd)) : StopFunctionAppCmd.Trim(),
    };
  }
}

public record DotNetSettings {
  public required string CleanProject { get; init; }
  public required string BuildProject { get; init; }
  public required string PublishProject { get; init; }

  public Dto ToDto() => new() {
    CleanProject = CleanProject,
    BuildProject = BuildProject,
    PublishProject = PublishProject,
  };

  public record Dto : IDto<DotNetSettings> {
    public string? CleanProject { get; init; }
    public string? BuildProject { get; init; }
    public string? PublishProject { get; init; }

    public DotNetSettings ToBase() => new() {
      CleanProject = String.IsNullOrWhiteSpace(CleanProject) ? throw new ArgumentNullException(nameof(CleanProject)) : CleanProject.Trim(),
      BuildProject = String.IsNullOrWhiteSpace(BuildProject) ? throw new ArgumentNullException(nameof(BuildProject)) : BuildProject.Trim(),
      PublishProject = String.IsNullOrWhiteSpace(PublishProject) ? throw new ArgumentNullException(nameof(PublishProject)) : PublishProject.Trim(),
    };
  }
}

public record ConsoleCommandsSettings {
  public required AzSettings Az { get; init; }
  public required DotNetSettings DotNet { get; init; }

  public Dto ToDto() => new() {
    Az = Az.ToDto(),
    DotNet = DotNet.ToDto(),
  };

  public record Dto : IDto<ConsoleCommandsSettings> {
    public AzSettings.Dto? Az { get; init; }
    public DotNetSettings.Dto? DotNet { get; init; }

    public ConsoleCommandsSettings ToBase() => new() {
      Az = Az?.ToBase() ?? throw new ArgumentNullException(nameof(Az)),
      DotNet = DotNet?.ToBase() ?? throw new ArgumentNullException(nameof(DotNet)),
    };
  }
}

public record DefaultsSettings {
  public required string GeneratedCodeFolder { get; init; }
  public required ConsoleCommandsSettings ConsoleCommands { get; init; }

  public Dto ToDto() => new() {
    GeneratedCodeFolder = GeneratedCodeFolder,
    ConsoleCommands = ConsoleCommands.ToDto(),
  };

  public record Dto : IDto<DefaultsSettings> {
    public string? GeneratedCodeFolder { get; init; }
    public ConsoleCommandsSettings.Dto? ConsoleCommands { get; init; }

    public DefaultsSettings ToBase() => new() {
      GeneratedCodeFolder = String.IsNullOrWhiteSpace(GeneratedCodeFolder) ? throw new ArgumentNullException(nameof(GeneratedCodeFolder)) : GeneratedCodeFolder.Trim(),
      ConsoleCommands = ConsoleCommands?.ToBase() ?? throw new ArgumentNullException(nameof(ConsoleCommands)),
    };
  }
}

public record ClickUpSettings {
  public required string BaseUrl { get; init; }
  public required string ListId { get; init; }

  public Dto ToDto() => new() {
    BaseUrl = BaseUrl,
    ListId = ListId,
  };

  public record Dto : IDto<ClickUpSettings> {
    public string? BaseUrl { get; init; }
    public string? ListId { get; init; }

    public ClickUpSettings ToBase() => new() {
      BaseUrl = String.IsNullOrWhiteSpace(BaseUrl) ? throw new ArgumentNullException(nameof(BaseUrl)) : BaseUrl.Trim(),
      ListId = String.IsNullOrWhiteSpace(ListId) ? throw new ArgumentNullException(nameof(ListId)) : ListId.Trim(),
    };
  }
}

public record AppSheetSettings {
  public required string BaseUrl { get; init; }
  public required string AppId { get; init; }
  public required string TableName { get; init; }

  public Dto ToDto() => new() {
    BaseUrl = BaseUrl,
    AppId = AppId,
    TableName = TableName,
  };

  public record Dto : IDto<AppSheetSettings> {
    public string? BaseUrl { get; init; }
    public string? AppId { get; init; }
    public string? TableName { get; init; }

    public AppSheetSettings ToBase() => new() {
      BaseUrl = String.IsNullOrWhiteSpace(BaseUrl) ? throw new ArgumentNullException(nameof(BaseUrl)) : BaseUrl.Trim(),
      AppId = String.IsNullOrWhiteSpace(AppId) ? throw new ArgumentNullException(nameof(AppId)) : AppId.Trim(),
      TableName = String.IsNullOrWhiteSpace(TableName) ? throw new ArgumentNullException(nameof(TableName)) : TableName.Trim(),
    };
  }
}

public record StagedEntityRepositorySettings {
  public required string Provider { get; init; }
  public required string ConnectionString { get; init; }
  public required string SchemaName { get; init; }
  public required string TableName { get; init; }
  public required bool CreateSchema { get; init; }
  public required int Limit { get; init; }

  public Dto ToDto() => new() {
    Provider = Provider,
    ConnectionString = ConnectionString,
    SchemaName = SchemaName,
    TableName = TableName,
    CreateSchema = CreateSchema,
    Limit = Limit,
  };

  public record Dto : IDto<StagedEntityRepositorySettings> {
    public string? Provider { get; init; }
    public string? ConnectionString { get; init; }
    public string? SchemaName { get; init; }
    public string? TableName { get; init; }
    public bool? CreateSchema { get; init; }
    public int? Limit { get; init; }

    public StagedEntityRepositorySettings ToBase() => new() {
      Provider = String.IsNullOrWhiteSpace(Provider) ? throw new ArgumentNullException(nameof(Provider)) : Provider.Trim(),
      ConnectionString = String.IsNullOrWhiteSpace(ConnectionString) ? throw new ArgumentNullException(nameof(ConnectionString)) : ConnectionString.Trim(),
      SchemaName = String.IsNullOrWhiteSpace(SchemaName) ? throw new ArgumentNullException(nameof(SchemaName)) : SchemaName.Trim(),
      TableName = String.IsNullOrWhiteSpace(TableName) ? throw new ArgumentNullException(nameof(TableName)) : TableName.Trim(),
      CreateSchema = CreateSchema ?? false,
      Limit = Limit ?? 0,
    };
  }
}

public record CtlRepositorySettings {
  public required string Provider { get; init; }
  public required string ConnectionString { get; init; }
  public required string SchemaName { get; init; }
  public required string SystemStateTableName { get; init; }
  public required string ObjectStateTableName { get; init; }
  public required string CoreToSysMapTableName { get; init; }
  public required bool CreateSchema { get; init; }

  public Dto ToDto() => new() {
    Provider = Provider,
    ConnectionString = ConnectionString,
    SchemaName = SchemaName,
    SystemStateTableName = SystemStateTableName,
    ObjectStateTableName = ObjectStateTableName,
    CoreToSysMapTableName = CoreToSysMapTableName,
    CreateSchema = CreateSchema,
  };

  public record Dto : IDto<CtlRepositorySettings> {
    public string? Provider { get; init; }
    public string? ConnectionString { get; init; }
    public string? SchemaName { get; init; }
    public string? SystemStateTableName { get; init; }
    public string? ObjectStateTableName { get; init; }
    public string? CoreToSysMapTableName { get; init; }
    public bool? CreateSchema { get; init; }

    public CtlRepositorySettings ToBase() => new() {
      Provider = String.IsNullOrWhiteSpace(Provider) ? throw new ArgumentNullException(nameof(Provider)) : Provider.Trim(),
      ConnectionString = String.IsNullOrWhiteSpace(ConnectionString) ? throw new ArgumentNullException(nameof(ConnectionString)) : ConnectionString.Trim(),
      SchemaName = String.IsNullOrWhiteSpace(SchemaName) ? throw new ArgumentNullException(nameof(SchemaName)) : SchemaName.Trim(),
      SystemStateTableName = String.IsNullOrWhiteSpace(SystemStateTableName) ? throw new ArgumentNullException(nameof(SystemStateTableName)) : SystemStateTableName.Trim(),
      ObjectStateTableName = String.IsNullOrWhiteSpace(ObjectStateTableName) ? throw new ArgumentNullException(nameof(ObjectStateTableName)) : ObjectStateTableName.Trim(),
      CoreToSysMapTableName = String.IsNullOrWhiteSpace(CoreToSysMapTableName) ? throw new ArgumentNullException(nameof(CoreToSysMapTableName)) : CoreToSysMapTableName.Trim(),
      CreateSchema = CreateSchema ?? false,
    };
  }
}

public record CoreStorageSettings {
  public required string Provider { get; init; }
  public required string ConnectionString { get; init; }
  public required string SchemaName { get; init; }
  public required string CtlSchemaName { get; init; }
  public required bool CreateSchema { get; init; }

  public Dto ToDto() => new() {
    Provider = Provider,
    ConnectionString = ConnectionString,
    SchemaName = SchemaName,
    CtlSchemaName = CtlSchemaName,
    CreateSchema = CreateSchema,
  };

  public record Dto : IDto<CoreStorageSettings> {
    public string? Provider { get; init; }
    public string? ConnectionString { get; init; }
    public string? SchemaName { get; init; }
    public string? CtlSchemaName { get; init; }
    public bool? CreateSchema { get; init; }

    public CoreStorageSettings ToBase() => new() {
      Provider = String.IsNullOrWhiteSpace(Provider) ? throw new ArgumentNullException(nameof(Provider)) : Provider.Trim(),
      ConnectionString = String.IsNullOrWhiteSpace(ConnectionString) ? throw new ArgumentNullException(nameof(ConnectionString)) : ConnectionString.Trim(),
      SchemaName = String.IsNullOrWhiteSpace(SchemaName) ? throw new ArgumentNullException(nameof(SchemaName)) : SchemaName.Trim(),
      CtlSchemaName = String.IsNullOrWhiteSpace(CtlSchemaName) ? throw new ArgumentNullException(nameof(CtlSchemaName)) : CtlSchemaName.Trim(),
      CreateSchema = CreateSchema ?? false,
    };
  }
}

public record AzureSettings {
  public required string Region { get; init; }
  public required string ResourceGroup { get; init; }
  public required string AppServicePlan { get; init; }

  public Dto ToDto() => new() {
    Region = Region,
    ResourceGroup = ResourceGroup,
    AppServicePlan = AppServicePlan,
  };

  public record Dto : IDto<AzureSettings> {
    public string? Region { get; init; }
    public string? ResourceGroup { get; init; }
    public string? AppServicePlan { get; init; }

    public AzureSettings ToBase() => new() {
      Region = String.IsNullOrWhiteSpace(Region) ? throw new ArgumentNullException(nameof(Region)) : Region.Trim(),
      ResourceGroup = String.IsNullOrWhiteSpace(ResourceGroup) ? throw new ArgumentNullException(nameof(ResourceGroup)) : ResourceGroup.Trim(),
      AppServicePlan = String.IsNullOrWhiteSpace(AppServicePlan) ? throw new ArgumentNullException(nameof(AppServicePlan)) : AppServicePlan.Trim(),
    };
  }
}

public record AwsSettings {
  public required string Region { get; init; }
  public required string AccountName { get; init; }

  public Dto ToDto() => new() {
    Region = Region,
    AccountName = AccountName,
  };

  public record Dto : IDto<AwsSettings> {
    public string? Region { get; init; }
    public string? AccountName { get; init; }

    public AwsSettings ToBase() => new() {
      Region = String.IsNullOrWhiteSpace(Region) ? throw new ArgumentNullException(nameof(Region)) : Region.Trim(),
      AccountName = String.IsNullOrWhiteSpace(AccountName) ? throw new ArgumentNullException(nameof(AccountName)) : AccountName.Trim(),
    };
  }
}

