

///////////////////////////////////////////////////////////////////////////////
// Note: this file is generated by `centazio dev gen-settings` - DO NOT MODIFY
///////////////////////////////////////////////////////////////////////////////

namespace Centazio.Core.Settings;


public record AzSettings {

  public required string ListFunctionApps { get; init; }
  public required string ListFunctions { get; init; }
  public required string DeleteFunctionApp { get; init; }
  public required string StartFunctionApp { get; init; }
  public required string StopFunctionApp { get; init; }

  public Dto ToDto() => new() { 
    ListFunctionApps = ListFunctionApps,
    ListFunctions = ListFunctions,
    DeleteFunctionApp = DeleteFunctionApp,
    StartFunctionApp = StartFunctionApp,
    StopFunctionApp = StopFunctionApp,
  };

  public record Dto : IDto<AzSettings> { 
    public string? ListFunctionApps { get; init; }
    public string? ListFunctions { get; init; }
    public string? DeleteFunctionApp { get; init; }
    public string? StartFunctionApp { get; init; }
    public string? StopFunctionApp { get; init; }

    public AzSettings ToBase() => new() { 
      ListFunctionApps = String.IsNullOrWhiteSpace(ListFunctionApps) ? throw new ArgumentNullException(nameof(ListFunctionApps)) : ListFunctionApps.Trim(),
      ListFunctions = String.IsNullOrWhiteSpace(ListFunctions) ? throw new ArgumentNullException(nameof(ListFunctions)) : ListFunctions.Trim(),
      DeleteFunctionApp = String.IsNullOrWhiteSpace(DeleteFunctionApp) ? throw new ArgumentNullException(nameof(DeleteFunctionApp)) : DeleteFunctionApp.Trim(),
      StartFunctionApp = String.IsNullOrWhiteSpace(StartFunctionApp) ? throw new ArgumentNullException(nameof(StartFunctionApp)) : StartFunctionApp.Trim(),
      StopFunctionApp = String.IsNullOrWhiteSpace(StopFunctionApp) ? throw new ArgumentNullException(nameof(StopFunctionApp)) : StopFunctionApp.Trim(),
    };
  }
}

public record FuncSettings {

  public required string LocalSimulateFunction { get; init; }
  public required string ShowLogStream { get; init; }

  public Dto ToDto() => new() { 
    LocalSimulateFunction = LocalSimulateFunction,
    ShowLogStream = ShowLogStream,
  };

  public record Dto : IDto<FuncSettings> { 
    public string? LocalSimulateFunction { get; init; }
    public string? ShowLogStream { get; init; }

    public FuncSettings ToBase() => new() { 
      LocalSimulateFunction = String.IsNullOrWhiteSpace(LocalSimulateFunction) ? throw new ArgumentNullException(nameof(LocalSimulateFunction)) : LocalSimulateFunction.Trim(),
      ShowLogStream = String.IsNullOrWhiteSpace(ShowLogStream) ? throw new ArgumentNullException(nameof(ShowLogStream)) : ShowLogStream.Trim(),
    };
  }
}

public record DotNetSettings {

  public required string CleanProject { get; init; }
  public required string BuildProject { get; init; }
  public required string PublishProject { get; init; }

  public Dto ToDto() => new() { 
    CleanProject = CleanProject,
    BuildProject = BuildProject,
    PublishProject = PublishProject,
  };

  public record Dto : IDto<DotNetSettings> { 
    public string? CleanProject { get; init; }
    public string? BuildProject { get; init; }
    public string? PublishProject { get; init; }

    public DotNetSettings ToBase() => new() { 
      CleanProject = String.IsNullOrWhiteSpace(CleanProject) ? throw new ArgumentNullException(nameof(CleanProject)) : CleanProject.Trim(),
      BuildProject = String.IsNullOrWhiteSpace(BuildProject) ? throw new ArgumentNullException(nameof(BuildProject)) : BuildProject.Trim(),
      PublishProject = String.IsNullOrWhiteSpace(PublishProject) ? throw new ArgumentNullException(nameof(PublishProject)) : PublishProject.Trim(),
    };
  }
}

public record LambdaSettings {

  public required string ShowLogStream { get; init; }

  public Dto ToDto() => new() { 
    ShowLogStream = ShowLogStream,
  };

  public record Dto : IDto<LambdaSettings> { 
    public string? ShowLogStream { get; init; }

    public LambdaSettings ToBase() => new() { 
      ShowLogStream = String.IsNullOrWhiteSpace(ShowLogStream) ? throw new ArgumentNullException(nameof(ShowLogStream)) : ShowLogStream.Trim(),
    };
  }
}

public record ConsoleCommandsSettings {

  public required AzSettings Az { get; init; }
  public required FuncSettings Func { get; init; }
  public required DotNetSettings DotNet { get; init; }
  public required LambdaSettings Lambda { get; init; }

  public Dto ToDto() => new() { 
    Az = Az.ToDto(),
    Func = Func.ToDto(),
    DotNet = DotNet.ToDto(),
    Lambda = Lambda.ToDto(),
  };

  public record Dto : IDto<ConsoleCommandsSettings> { 
    public AzSettings.Dto? Az { get; init; }
    public FuncSettings.Dto? Func { get; init; }
    public DotNetSettings.Dto? DotNet { get; init; }
    public LambdaSettings.Dto? Lambda { get; init; }

    public ConsoleCommandsSettings ToBase() => new() { 
      Az = Az?.ToBase() ?? throw new ArgumentNullException(nameof(Az)),
      Func = Func?.ToBase() ?? throw new ArgumentNullException(nameof(Func)),
      DotNet = DotNet?.ToBase() ?? throw new ArgumentNullException(nameof(DotNet)),
      Lambda = Lambda?.ToBase() ?? throw new ArgumentNullException(nameof(Lambda)),
    };
  }
}

public record DefaultsSettings {

  public required string GeneratedCodeFolder { get; init; }
  public required int FunctionMaxAllowedRunningMinutes { get; init; }
  public required int ReadFunctionPollSeconds { get; init; }
  public required int PromoteFunctionPollSeconds { get; init; }
  public required int WriteFunctionPollSeconds { get; init; }
  public required int OtherFunctionPollSeconds { get; init; }
  public required ConsoleCommandsSettings ConsoleCommands { get; init; }

  public Dto ToDto() => new() { 
    GeneratedCodeFolder = GeneratedCodeFolder,
    FunctionMaxAllowedRunningMinutes = FunctionMaxAllowedRunningMinutes,
    ReadFunctionPollSeconds = ReadFunctionPollSeconds,
    PromoteFunctionPollSeconds = PromoteFunctionPollSeconds,
    WriteFunctionPollSeconds = WriteFunctionPollSeconds,
    OtherFunctionPollSeconds = OtherFunctionPollSeconds,
    ConsoleCommands = ConsoleCommands.ToDto(),
  };

  public record Dto : IDto<DefaultsSettings> { 
    public string? GeneratedCodeFolder { get; init; }
    public int? FunctionMaxAllowedRunningMinutes { get; init; }
    public int? ReadFunctionPollSeconds { get; init; }
    public int? PromoteFunctionPollSeconds { get; init; }
    public int? WriteFunctionPollSeconds { get; init; }
    public int? OtherFunctionPollSeconds { get; init; }
    public ConsoleCommandsSettings.Dto? ConsoleCommands { get; init; }

    public DefaultsSettings ToBase() => new() { 
      GeneratedCodeFolder = String.IsNullOrWhiteSpace(GeneratedCodeFolder) ? throw new ArgumentNullException(nameof(GeneratedCodeFolder)) : GeneratedCodeFolder.Trim(),
      FunctionMaxAllowedRunningMinutes = FunctionMaxAllowedRunningMinutes ?? 0,
      ReadFunctionPollSeconds = ReadFunctionPollSeconds ?? 0,
      PromoteFunctionPollSeconds = PromoteFunctionPollSeconds ?? 0,
      WriteFunctionPollSeconds = WriteFunctionPollSeconds ?? 0,
      OtherFunctionPollSeconds = OtherFunctionPollSeconds ?? 0,
      ConsoleCommands = ConsoleCommands?.ToBase() ?? throw new ArgumentNullException(nameof(ConsoleCommands)),
    };
  }
}

public record ClickUpSettings {

  public required string BaseUrl { get; init; }
  public required string ListId { get; init; }

  public Dto ToDto() => new() { 
    BaseUrl = BaseUrl,
    ListId = ListId,
  };

  public record Dto : IDto<ClickUpSettings> { 
    public string? BaseUrl { get; init; }
    public string? ListId { get; init; }

    public ClickUpSettings ToBase() => new() { 
      BaseUrl = String.IsNullOrWhiteSpace(BaseUrl) ? throw new ArgumentNullException(nameof(BaseUrl)) : BaseUrl.Trim(),
      ListId = String.IsNullOrWhiteSpace(ListId) ? throw new ArgumentNullException(nameof(ListId)) : ListId.Trim(),
    };
  }
}

public record AppSheetSettings {

  public required string BaseUrl { get; init; }
  public required string AppId { get; init; }
  public required string TableName { get; init; }

  public Dto ToDto() => new() { 
    BaseUrl = BaseUrl,
    AppId = AppId,
    TableName = TableName,
  };

  public record Dto : IDto<AppSheetSettings> { 
    public string? BaseUrl { get; init; }
    public string? AppId { get; init; }
    public string? TableName { get; init; }

    public AppSheetSettings ToBase() => new() { 
      BaseUrl = String.IsNullOrWhiteSpace(BaseUrl) ? throw new ArgumentNullException(nameof(BaseUrl)) : BaseUrl.Trim(),
      AppId = String.IsNullOrWhiteSpace(AppId) ? throw new ArgumentNullException(nameof(AppId)) : AppId.Trim(),
      TableName = String.IsNullOrWhiteSpace(TableName) ? throw new ArgumentNullException(nameof(TableName)) : TableName.Trim(),
    };
  }
}

public record StagedEntityRepositorySettings {

  public required string Provider { get; init; }
  public required string ConnectionString { get; init; }
  public required string SchemaName { get; init; }
  public required string TableName { get; init; }
  public required bool CreateSchema { get; init; }
  public required int Limit { get; init; }

  public Dto ToDto() => new() { 
    Provider = Provider,
    ConnectionString = ConnectionString,
    SchemaName = SchemaName,
    TableName = TableName,
    CreateSchema = CreateSchema,
    Limit = Limit,
  };

  public record Dto : IDto<StagedEntityRepositorySettings> { 
    public string? Provider { get; init; }
    public string? ConnectionString { get; init; }
    public string? SchemaName { get; init; }
    public string? TableName { get; init; }
    public bool? CreateSchema { get; init; }
    public int? Limit { get; init; }

    public StagedEntityRepositorySettings ToBase() => new() { 
      Provider = String.IsNullOrWhiteSpace(Provider) ? throw new ArgumentNullException(nameof(Provider)) : Provider.Trim(),
      ConnectionString = String.IsNullOrWhiteSpace(ConnectionString) ? throw new ArgumentNullException(nameof(ConnectionString)) : ConnectionString.Trim(),
      SchemaName = String.IsNullOrWhiteSpace(SchemaName) ? throw new ArgumentNullException(nameof(SchemaName)) : SchemaName.Trim(),
      TableName = String.IsNullOrWhiteSpace(TableName) ? throw new ArgumentNullException(nameof(TableName)) : TableName.Trim(),
      CreateSchema = CreateSchema ?? false,
      Limit = Limit ?? 0,
    };
  }
}

public record CtlRepositorySettings {

  public required string Provider { get; init; }
  public required string ConnectionString { get; init; }
  public required string SchemaName { get; init; }
  public required string SystemStateTableName { get; init; }
  public required string ObjectStateTableName { get; init; }
  public required string CoreToSysMapTableName { get; init; }
  public required bool CreateSchema { get; init; }

  public Dto ToDto() => new() { 
    Provider = Provider,
    ConnectionString = ConnectionString,
    SchemaName = SchemaName,
    SystemStateTableName = SystemStateTableName,
    ObjectStateTableName = ObjectStateTableName,
    CoreToSysMapTableName = CoreToSysMapTableName,
    CreateSchema = CreateSchema,
  };

  public record Dto : IDto<CtlRepositorySettings> { 
    public string? Provider { get; init; }
    public string? ConnectionString { get; init; }
    public string? SchemaName { get; init; }
    public string? SystemStateTableName { get; init; }
    public string? ObjectStateTableName { get; init; }
    public string? CoreToSysMapTableName { get; init; }
    public bool? CreateSchema { get; init; }

    public CtlRepositorySettings ToBase() => new() { 
      Provider = String.IsNullOrWhiteSpace(Provider) ? throw new ArgumentNullException(nameof(Provider)) : Provider.Trim(),
      ConnectionString = String.IsNullOrWhiteSpace(ConnectionString) ? throw new ArgumentNullException(nameof(ConnectionString)) : ConnectionString.Trim(),
      SchemaName = String.IsNullOrWhiteSpace(SchemaName) ? throw new ArgumentNullException(nameof(SchemaName)) : SchemaName.Trim(),
      SystemStateTableName = String.IsNullOrWhiteSpace(SystemStateTableName) ? throw new ArgumentNullException(nameof(SystemStateTableName)) : SystemStateTableName.Trim(),
      ObjectStateTableName = String.IsNullOrWhiteSpace(ObjectStateTableName) ? throw new ArgumentNullException(nameof(ObjectStateTableName)) : ObjectStateTableName.Trim(),
      CoreToSysMapTableName = String.IsNullOrWhiteSpace(CoreToSysMapTableName) ? throw new ArgumentNullException(nameof(CoreToSysMapTableName)) : CoreToSysMapTableName.Trim(),
      CreateSchema = CreateSchema ?? false,
    };
  }
}

public record CoreStorageSettings {

  public required string Provider { get; init; }
  public required string ConnectionString { get; init; }
  public required string SchemaName { get; init; }
  public required string CtlSchemaName { get; init; }
  public required bool CreateSchema { get; init; }

  public Dto ToDto() => new() { 
    Provider = Provider,
    ConnectionString = ConnectionString,
    SchemaName = SchemaName,
    CtlSchemaName = CtlSchemaName,
    CreateSchema = CreateSchema,
  };

  public record Dto : IDto<CoreStorageSettings> { 
    public string? Provider { get; init; }
    public string? ConnectionString { get; init; }
    public string? SchemaName { get; init; }
    public string? CtlSchemaName { get; init; }
    public bool? CreateSchema { get; init; }

    public CoreStorageSettings ToBase() => new() { 
      Provider = String.IsNullOrWhiteSpace(Provider) ? throw new ArgumentNullException(nameof(Provider)) : Provider.Trim(),
      ConnectionString = String.IsNullOrWhiteSpace(ConnectionString) ? throw new ArgumentNullException(nameof(ConnectionString)) : ConnectionString.Trim(),
      SchemaName = String.IsNullOrWhiteSpace(SchemaName) ? throw new ArgumentNullException(nameof(SchemaName)) : SchemaName.Trim(),
      CtlSchemaName = String.IsNullOrWhiteSpace(CtlSchemaName) ? throw new ArgumentNullException(nameof(CtlSchemaName)) : CtlSchemaName.Trim(),
      CreateSchema = CreateSchema ?? false,
    };
  }
}

public record AzureSettings {

  public required string Region { get; init; }
  public required string ResourceGroup { get; init; }
  public string? AppServicePlan { get; init; }

  public Dto ToDto() => new() { 
    Region = Region,
    ResourceGroup = ResourceGroup,
    AppServicePlan = AppServicePlan,
  };

  public record Dto : IDto<AzureSettings> { 
    public string? Region { get; init; }
    public string? ResourceGroup { get; init; }
    public string? AppServicePlan { get; init; }

    public AzureSettings ToBase() => new() { 
      Region = String.IsNullOrWhiteSpace(Region) ? throw new ArgumentNullException(nameof(Region)) : Region.Trim(),
      ResourceGroup = String.IsNullOrWhiteSpace(ResourceGroup) ? throw new ArgumentNullException(nameof(ResourceGroup)) : ResourceGroup.Trim(),
            AppServicePlan = AppServicePlan?.Trim(),
    };
  }
}

public record AwsSettings {

  public required string Region { get; init; }
  public required string AccountName { get; init; }

  public Dto ToDto() => new() { 
    Region = Region,
    AccountName = AccountName,
  };

  public record Dto : IDto<AwsSettings> { 
    public string? Region { get; init; }
    public string? AccountName { get; init; }

    public AwsSettings ToBase() => new() { 
      Region = String.IsNullOrWhiteSpace(Region) ? throw new ArgumentNullException(nameof(Region)) : Region.Trim(),
      AccountName = String.IsNullOrWhiteSpace(AccountName) ? throw new ArgumentNullException(nameof(AccountName)) : AccountName.Trim(),
    };
  }
}
